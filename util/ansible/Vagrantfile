# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = '2'

mode = "default"

if mode == "default"
    # Default (SIP master branch) nodes
    NODES = [{ name: 'sip-01', ip: '192.168.111.101', cpus: 2, mem: 2048 }]
elsif mode == "docker_swarm"
    # Docker Swarm (paas_prototype) nodes
    mem = 2048
    cpus = 2
    NODES = [
      { name: 'sip-01', ip: '192.168.111.101', cpus: cpus, mem: mem },
      { name: 'sip-02', ip: '192.168.111.102', cpus: cpus, mem: mem }
    ]
end

puts "Nodes (#{mode}):"
NODES.each do |node|
    print("#{node}\n")
end
puts ""

# Create insecure SSH key pair (if required)
rtn = system('echo -e "n" | ssh-keygen -t rsa -b 4096 -f keys/sip -q -N "" 1>/dev/null')

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Loop over set of defined nodes and set up VMs
  NODES.each do |node|
    config.vm.define node[:name] do |config|

      config.vm.box = "ubuntu/xenial64"
      config.vm.hostname = node[:name].to_s

      # Provision network interface
      config.vm.network :private_network, ip: node[:ip]

      # Configure ssh keys
      # TODO(BM) create own private key here..?
      config.ssh.private_key_path = 'keys/sip'
      config.ssh.insert_key = false
      config.vm.provision :file, source: "keys/sip.pub", destination: "~/.ssh/authorized_keys"
      config.vm.provision :file, source: "keys/sip.pub", destination: "~/.ssh/id_rsa.pub"
      config.vm.provision :file, source: "keys/sip", destination: "~/.ssh/id_rsa"
      config.vm.provision :shell, :inline => "chmod 600 /home/ubuntu/.ssh/id_rsa"

      # Virtualbox configuration
      config.vm.provider :virtualbox do |vb|
        vb.name = node[:name].to_s
        vb.customize ['modifyvm', :id, '--cpus', node[:cpus]]
        vb.customize ['modifyvm', :id, '--memory', node[:mem]]
        vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
      end

      # Port forwards (NAT)
      if not node[:expose_ports].nil?
        if node[:expose_ports]
          node[:expose_ports].each do |ports|
            config.vm.network :forwarded_port, \
              guest: ports[:guest], \
              host: ports[:host], \
              id: ports[:id]
          end
        end
      end

    end
  end

end
