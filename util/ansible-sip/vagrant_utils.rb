
def write_group(file, group, boxes, group_name)
    # Function to write a group of hosts to the Ansible inventory file.
    if group.any?
        file.puts("[#{group_name}]\n")
        group.each do |id|
            box = boxes[id]
            file.puts("#{box[:name]} ansible_host=#{box[:ip]} \n")
        end
        file.puts("\n")
    end
end

def write_hosts_file(boxes, box_user, ansible_inventory_file, key_file)
    # Function to write an Ansible inventory file based on the array of
    # hashes defined in the Vagrantfile called boxes.
    swarm_leader = Array.new
    swarm_managers = Array.new
    swarm_workers = Array.new
    spark_masters = Array.new
    spark_slaves = Array.new
    boxes.each_with_index do |box, id|
        groups = Array(box[:groups])
        # puts "#{groups}"
        if groups.include?(:swarm_worker)
            # puts "Adding Docker Swarm worker #{box[:name]}"
            swarm_workers.push(id)
        end

        if groups.include?(:swarm_manager)
            # puts "Adding Docker Swarm manager #{box[:name]}"
            swarm_managers.push(id)
        end

        if groups.include?(:swarm_leader)
            # puts "Adding Docker Swarm leader #{box[:name]}"
            swarm_leader.push(id)
        end

        if groups.include?(:spark_master)
            # puts "Adding Spark Master #{box[:name]}"
            spark_masters.push(id)
        end

        if groups.include?(:spark_slave)
            # puts "Adding Spark Slave #{box[:name]}"
            spark_slaves.push(id)
        end

    end

    if swarm_leader.size != 1
        raise RuntimeError, "A single swarm_leader must be specified."
    end

    # if spark_masters.size < 1
    #     raise RuntimeError, "At least one spark_master must be specified!"
    # end

    file = File.open(ansible_inventory_file, 'w')
    file.puts("# -- Autogenerated Ansible inventory file.\n")
    file.puts("# -- This file was generated from the Vagrantfile.\n")
    file.puts("\n")

    file.puts("[all:vars]\n")
    file.puts("ansible_user=#{box_user}\n")
    file.puts("ansible_ssh_private_key_file=#{key_file}\n")
    file.puts("\n")

    write_group(file, swarm_leader, boxes, "swarm_leader")
    write_group(file, swarm_managers, boxes, "swarm_managers")
    write_group(file, swarm_workers, boxes, "swarm_workers")
    write_group(file, spark_masters, boxes, "spark-masters")
    write_group(file, spark_slaves, boxes, "spark-slaves")
    file.close()

end
