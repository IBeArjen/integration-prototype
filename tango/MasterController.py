#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        MasterController.py
#
#  Project :     SKA SDP Master Controller
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      brian.mcilwrath$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["MasterController", "MasterControllerClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(MasterController.additionnal_import) ENABLED START -----#
import rpyc
import pdb
import json
#----- PROTECTED REGION END -----#	//	MasterController.additionnal_import

# Device States Description
# ON : Online
# OFF : Offline
# INIT : Configuring
# CLOSE : Shutdown


class MasterController (PyTango.Device_4Impl):
    """A prototype Tango Device Server for the SDP Master Controller"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(MasterController.global_variables) ENABLED START -----#
    mc_conn = None 
    mc_status_local = None
    #----- PROTECTED REGION END -----#	//	MasterController.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        MasterController.init_device(self)
        #----- PROTECTED REGION ID(MasterController.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MasterController.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(MasterController.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MasterController.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_mc_status_read = ""
        #----- PROTECTED REGION ID(MasterController.init_device) ENABLED START -----#
        #----- PROTECTED REGION END -----#	//	MasterController.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(MasterController.always_executed_hook) ENABLED START -----#
        if(self.mc_conn == None):
           self.debug_stream("Trying to connect to Master Controller")
           try:
              self.mc_conn  = rpyc.connect(host='localhost', port=12345)
              self.set_state(PyTango.DevState.RUNNING)
              self.debug_stream('Connected to Master Controller')
           except ConnectionRefusedError:
              self.error_stream('Unable to connect to Master Controller '
                               'Is it started')
              self.set_state(PyTango.DevState.OFF)
        else:
           self.debug_stream("Already connected to Master Controller") 
           self.set_state(PyTango.DevState.RUNNING)
        if(self.mc_conn != None) :
           try:
              # pdb.set_trace()
               self.debug_stream("getting Master Controller state")
               function = getattr(self.mc_conn.root, 'get_current_state')
               result = function()
               self.mc_status_local = result 
           except EOFError:
               self.error_stream("EOFError in communication with Master Controller")
               self.mc_conn = None
               self.always_executed_hook(self) 

        
        #----- PROTECTED REGION END -----#	//	MasterController.always_executed_hook

    # -------------------------------------------------------------------------
    #    MasterController read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_mc_status(self, attr):
        self.debug_stream("In read_mc_status()")
        #----- PROTECTED REGION ID(MasterController.mc_status_read) ENABLED START -----#
        if not self.mc_conn:
           self.fatal_stream('No connection to master controller')
           return
        function = getattr(self.mc_conn.root, 'get_current_state')
        result = function()
        attr.set_value(result)
        
        #----- PROTECTED REGION END -----#	//	MasterController.mc_status_read
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(MasterController.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MasterController.read_attr_hardware


    # -------------------------------------------------------------------------
    #    MasterController command methods
    # -------------------------------------------------------------------------
    
    def online(self):
        """ Set master controller online
        """
        self.debug_stream("In online()")
        #----- PROTECTED REGION ID(MasterController.online) ENABLED START -----#
        #pdb.set_trace()
        if not self.mc_conn:
           PyTango.Except.throw_exception("NOMC","No connection to MasterController", "online()")
        if self.mc_status_local != 'Standby':
           PyTango.Except.throw_exception("MCSTATE","MasterController in invalid state - {}".format(self.mc_status_local), "online()")
 
        function = getattr(self.mc_conn.root, 'online')
        try:
           ret = function()
           self.debug_stream("Master controller online() successful")
        except TypeError as error:
               self.error_stream("Error from 'online': ", error)
        
        #----- PROTECTED REGION END -----#	//	MasterController.online
        
    def offline(self):
        """ Master Controller ``offl;ine`` command
        """
        self.debug_stream("In offline()")
        #----- PROTECTED REGION ID(MasterController.offline) ENABLED START -----#
        if not self.mc_conn:
           PyTango.Except.throw_exception("NOMC","No connection to MasterController", "online()")
        if self.mc_status_local != 'Available':
           PyTango.Except.throw_exception("MCSTATE","MasterController in invalid state - {}".format(self.mc_status_local), "offline()")
 
        function = getattr(self.mc_conn.root, 'offline')
        try:
           ret = function()
           self.debug_stream("Master controller offline() successful")
        except TypeError as error:
               self.error_stream("Error from 'offline': ", error)
        
        #----- PROTECTED REGION END -----#	//	MasterController.offline
        
    def shutdown(self):
        """ Master controller ``shutdown`` command
        """
        self.debug_stream("In shutdown()")
        #----- PROTECTED REGION ID(MasterController.shutdown) ENABLED START -----#
        if not self.mc_conn:
           PyTango.Except.throw_exception("NOMC","No connection to MasterController", "online()")
        if self.mc_status_local != 'Standby':
           PyTango.Except.throw_exception("MCSTATE","MasterController in invalid state - {}".format(self.mc_status_local), "shutdown()")
 
        function = getattr(self.mc_conn.root, 'shutdown')
        try:
           ret = function()
           self.debug_stream("Master controller shutdown() successful")
        except TypeError as error:
               self.error_stream("Error from 'shutdown': ", error)
        
        #----- PROTECTED REGION END -----#	//	MasterController.shutdown
        
    def capability(self, argin):
        """ Master controller ``capability`` command - JSON encoded values
        :param argin: 
        :type argin: PyTango.DevString
        """
        self.debug_stream("In capability()")
        #----- PROTECTED REGION ID(MasterController.capability) ENABLED START -----#
        try:
            j =  json.loads(argin)
            name = j['name']
            type = j['type'] 
        except ValueError as e:
            self.error_stream("Capability argument not valid JSON - {}".format(e))
            PyTango.Except.throw_exception("BADARG","Invalid argument to capability()", "capability()")
        #pdb.set_trace()
        if not self.mc_conn:
           PyTango.Except.throw_exception("NOMC","No connection to MasterController", "capability()")
        if self.mc_status_local != 'Available':
           PyTango.Except.throw_exception("MCSTATE","MasterController in invalid state - {}".format(self.mc_status_local), "capability()")

        function = getattr(self.mc_conn.root, 'capability')
        try:
           args = [name, type]
           ret = function(*args)
           self.debug_stream("Master controller shutdown() successful")
        except TypeError as error:
               self.error_stream("Error from 'capability': ", error)
 
        #----- PROTECTED REGION END -----#	//	MasterController.capability
        
    def startup(self):
        """ Master Controller experimental startup
        """
        self.debug_stream("In startup()")
        #----- PROTECTED REGION ID(MasterController.startup) ENABLED START -----#

        import sys
        import os
        if self.mc_conn:
           self.debug_stream("Master Controller already connected")
        else: 
           sys.path.insert(0,"/home/bkm/integration-prototype")
           import subprocess
           os.chdir("/home/bkm/integration-prototype")
           task = subprocess.Popen(
               ['python3', '-m', 'sip.master', "notty"])
           self.debug_stream("Master Controller started")

        #----- PROTECTED REGION END -----#	//	MasterController.startup
        

    #----- PROTECTED REGION ID(MasterController.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	MasterController.programmer_methods

class MasterControllerClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(MasterController.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	MasterController.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        'online':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'offline':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'shutdown':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'capability':
            [[PyTango.DevString, "none"],
            [PyTango.DevVoid, "none"]],
        'startup':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'mc_status':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(MasterControllerClass, MasterController, 'MasterController')
        #----- PROTECTED REGION ID(MasterController.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MasterController.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
